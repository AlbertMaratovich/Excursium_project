{"uid":"1053cad9a804a8e1","name":"Переход на страницу с жалобами","fullName":"tests.test_excursium.TestUserCases#test_user_report_problem","historyId":"6ccf52d0675463b7f2ebb26dc5cf7f58","time":{"start":1753355451289,"stop":1753355456239,"duration":4950},"description":"Пользовательский сценарий перехода на вкладку с экскурсиями и на страницу с жалобами","descriptionHtml":"<p>Пользовательский сценарий перехода на вкладку с экскурсиями и на страницу с жалобами</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1247, 4233)\n  (Session info: chrome=138.0.7204.168); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n#0 0x55725689b70e <unknown>\n#1 0x557256337a51 <unknown>\n#2 0x557256388701 <unknown>\n#3 0x557256386cb9 <unknown>\n#4 0x557256384851 <unknown>\n#5 0x557256383fe3 <unknown>\n#6 0x55725637891a <unknown>\n#7 0x5572563a5ff2 <unknown>\n#8 0x5572563780fd <unknown>\n#9 0x5572563a61be <unknown>\n#10 0x5572563c5444 <unknown>\n#11 0x5572563a5dc3 <unknown>\n#12 0x557256376959 <unknown>\n#13 0x5572563774c1 <unknown>\n#14 0x5572568678aa <unknown>\n#15 0x55725686ac11 <unknown>\n#16 0x55725686a6a8 <unknown>\n#17 0x55725686b0b5 <unknown>\n#18 0x55725685134c <unknown>\n#19 0x55725686b421 <unknown>\n#20 0x557256839e2a <unknown>\n#21 0x557256889855 <unknown>\n#22 0x557256889a4e <unknown>\n#23 0x55725689a9f5 <unknown>\n#24 0x7fa8ccff71c4 <unknown>","statusTrace":"self = <test_excursium.TestUserCases object at 0x7f21fc8a43e0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e1dbc58bca037289b13d842bf369dbaa\")>\n\n    @allure.title(\"Переход на страницу с жалобами\")\n    @allure.severity(\"Normal\")\n    @pytest.mark.user_case\n    def test_user_report_problem(self, driver):\n        \"\"\"Пользовательский сценарий перехода на вкладку с экскурсиями и на страницу с жалобами\"\"\"\n        main_page = MainPage(driver)\n    \n        with allure.step(\"Открываем страницу\"):\n            driver.get(config.base_url)\n    \n        with allure.step(\"Переходим на страницу с экскурсиями\"):\n            driver.find_element(*main_page.all_excursion_btn).click()\n    \n        with allure.step(\"Находим и скролим до кнопки отправки жалобы\"):\n            report_btn = driver.find_element(*main_page.report_btn)\n            main_page.scroll_to(report_btn)\n>           report_btn.click()\n\ntests/test_excursium.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f21fc897c50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#22 0x557256889a4e \\\\u003Cunknown>\\\\n#23 0x55725689a9f5 \\\\u003Cunknown>\\\\n#24 0x7fa8ccff71c4 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1247, 4233)\nE         (Session info: chrome=138.0.7204.168); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       #0 0x55725689b70e <unknown>\nE       #1 0x557256337a51 <unknown>\nE       #2 0x557256388701 <unknown>\nE       #3 0x557256386cb9 <unknown>\nE       #4 0x557256384851 <unknown>\nE       #5 0x557256383fe3 <unknown>\nE       #6 0x55725637891a <unknown>\nE       #7 0x5572563a5ff2 <unknown>\nE       #8 0x5572563780fd <unknown>\nE       #9 0x5572563a61be <unknown>\nE       #10 0x5572563c5444 <unknown>\nE       #11 0x5572563a5dc3 <unknown>\nE       #12 0x557256376959 <unknown>\nE       #13 0x5572563774c1 <unknown>\nE       #14 0x5572568678aa <unknown>\nE       #15 0x55725686ac11 <unknown>\nE       #16 0x55725686a6a8 <unknown>\nE       #17 0x55725686b0b5 <unknown>\nE       #18 0x55725685134c <unknown>\nE       #19 0x55725686b421 <unknown>\nE       #20 0x557256839e2a <unknown>\nE       #21 0x557256889855 <unknown>\nE       #22 0x557256889a4e <unknown>\nE       #23 0x55725689a9f5 <unknown>\nE       #24 0x7fa8ccff71c4 <unknown>\n\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1753355450960,"stop":1753355451288,"duration":328},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Пользовательский сценарий перехода на вкладку с экскурсиями и на страницу с жалобами","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1247, 4233)\n  (Session info: chrome=138.0.7204.168); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n#0 0x55725689b70e <unknown>\n#1 0x557256337a51 <unknown>\n#2 0x557256388701 <unknown>\n#3 0x557256386cb9 <unknown>\n#4 0x557256384851 <unknown>\n#5 0x557256383fe3 <unknown>\n#6 0x55725637891a <unknown>\n#7 0x5572563a5ff2 <unknown>\n#8 0x5572563780fd <unknown>\n#9 0x5572563a61be <unknown>\n#10 0x5572563c5444 <unknown>\n#11 0x5572563a5dc3 <unknown>\n#12 0x557256376959 <unknown>\n#13 0x5572563774c1 <unknown>\n#14 0x5572568678aa <unknown>\n#15 0x55725686ac11 <unknown>\n#16 0x55725686a6a8 <unknown>\n#17 0x55725686b0b5 <unknown>\n#18 0x55725685134c <unknown>\n#19 0x55725686b421 <unknown>\n#20 0x557256839e2a <unknown>\n#21 0x557256889855 <unknown>\n#22 0x557256889a4e <unknown>\n#23 0x55725689a9f5 <unknown>\n#24 0x7fa8ccff71c4 <unknown>","statusTrace":"self = <test_excursium.TestUserCases object at 0x7f21fc8a43e0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e1dbc58bca037289b13d842bf369dbaa\")>\n\n    @allure.title(\"Переход на страницу с жалобами\")\n    @allure.severity(\"Normal\")\n    @pytest.mark.user_case\n    def test_user_report_problem(self, driver):\n        \"\"\"Пользовательский сценарий перехода на вкладку с экскурсиями и на страницу с жалобами\"\"\"\n        main_page = MainPage(driver)\n    \n        with allure.step(\"Открываем страницу\"):\n            driver.get(config.base_url)\n    \n        with allure.step(\"Переходим на страницу с экскурсиями\"):\n            driver.find_element(*main_page.all_excursion_btn).click()\n    \n        with allure.step(\"Находим и скролим до кнопки отправки жалобы\"):\n            report_btn = driver.find_element(*main_page.report_btn)\n            main_page.scroll_to(report_btn)\n>           report_btn.click()\n\ntests/test_excursium.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f21fc897c50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#22 0x557256889a4e \\\\u003Cunknown>\\\\n#23 0x55725689a9f5 \\\\u003Cunknown>\\\\n#24 0x7fa8ccff71c4 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1247, 4233)\nE         (Session info: chrome=138.0.7204.168); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       #0 0x55725689b70e <unknown>\nE       #1 0x557256337a51 <unknown>\nE       #2 0x557256388701 <unknown>\nE       #3 0x557256386cb9 <unknown>\nE       #4 0x557256384851 <unknown>\nE       #5 0x557256383fe3 <unknown>\nE       #6 0x55725637891a <unknown>\nE       #7 0x5572563a5ff2 <unknown>\nE       #8 0x5572563780fd <unknown>\nE       #9 0x5572563a61be <unknown>\nE       #10 0x5572563c5444 <unknown>\nE       #11 0x5572563a5dc3 <unknown>\nE       #12 0x557256376959 <unknown>\nE       #13 0x5572563774c1 <unknown>\nE       #14 0x5572568678aa <unknown>\nE       #15 0x55725686ac11 <unknown>\nE       #16 0x55725686a6a8 <unknown>\nE       #17 0x55725686b0b5 <unknown>\nE       #18 0x55725685134c <unknown>\nE       #19 0x55725686b421 <unknown>\nE       #20 0x557256839e2a <unknown>\nE       #21 0x557256889855 <unknown>\nE       #22 0x557256889a4e <unknown>\nE       #23 0x55725689a9f5 <unknown>\nE       #24 0x7fa8ccff71c4 <unknown>\n\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","steps":[{"name":"Открываем страницу","time":{"start":1753355451289,"stop":1753355452486,"duration":1197},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Переходим на страницу с экскурсиями","time":{"start":1753355452486,"stop":1753355455116,"duration":2630},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Находим и скролим до кнопки отправки жалобы","time":{"start":1753355455116,"stop":1753355456237,"duration":1121},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1247, 4233)\n  (Session info: chrome=138.0.7204.168); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n#0 0x55725689b70e <unknown>\n#1 0x557256337a51 <unknown>\n#2 0x557256388701 <unknown>\n#3 0x557256386cb9 <unknown>\n#4 0x557256384851 <unknown>\n#5 0x557256383fe3 <unknown>\n#6 0x55725637891a <unknown>\n#7 0x5572563a5ff2 <unknown>\n#8 0x5572563780fd <unknown>\n#9 0x5572563a61be <unknown>\n#10 0x5572563c5444 <unknown>\n#11 0x5572563a5dc3 <unknown>\n#12 0x557256376959 <unknown>\n#13 0x5572563774c1 <unknown>\n#14 0x5572568678aa <unknown>\n#15 0x55725686ac11 <unknown>\n#16 0x55725686a6a8 <unknown>\n#17 0x55725686b0b5 <unknown>\n#18 0x55725685134c <unknown>\n#19 0x55725686b421 <unknown>\n#20 0x557256839e2a <unknown>\n#21 0x557256889855 <unknown>\n#22 0x557256889a4e <unknown>\n#23 0x55725689a9f5 <unknown>\n#24 0x7fa8ccff71c4 <unknown>\n\n","statusTrace":"  File \"/app/tests/test_excursium.py\", line 110, in test_user_report_problem\n    report_btn.click()\n    ~~~~~~~~~~~~~~~~^^\n  File \"/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py\", line 120, in click\n    self._execute(Command.CLICK_ELEMENT)\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py\", line 573, in _execute\n    return self._parent.execute(command, params)\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 454, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Скроллим до элемента","time":{"start":1753355455127,"stop":1753355455132,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"4132f94f25f826ca","name":"Скриншот при падении","source":"4132f94f25f826ca.png","type":"image/png","size":587376}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1753355456482,"stop":1753355456545,"duration":63},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"Normal"},{"name":"feature","value":"Пользовательские сценарии"},{"name":"tag","value":"user_case"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_excursium"},{"name":"subSuite","value":"TestUserCases"},{"name":"host","value":"993cd3ee4cad"},{"name":"thread","value":"19-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_excursium"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["user_case"]},"source":"1053cad9a804a8e1.json","parameterValues":[]}